{"version":3,"sources":["components/Question.styles.ts","services/api.ts","components/Question.tsx","services/utils.ts","components/App.styles.ts","components/App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","Question","question","answers","handleClick","userAnswer","questionNumber","totalQuestions","answersJSX","map","answer","index","className","correct_answer","onClick","disabled","value","dangerouslySetInnerHTML","__html","shuffleArray","array","i","length","j","Math","floor","random","temp","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","incorrect_answers","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","setQuestionNumber","setUserAnswer","score","setScore","gameOver","setGameOver","startQuiz","EASY","newQuestions","undefined","e","selectedAnswer","currentTarget","prev","answerState","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.603c98cd.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    max-with: 1200px;\n\n    .number {\n        height: 10vh;\n        min-height: 30px;\n        color: #7D87A1;\n        margin: 0 40px;\n    }\n\n    .question {\n        height: 10vh;\n        min-height: 80px;\n        min-width: 250px;\n        font-weight: 700;\n        margin: 0 40px;\n    }\n\n    .answer {\n        height: 40vh;\n        min-height: 220px;\n    }\n` \n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease;\n    display: flex;\n    justify-content: center;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user.select: none;\n        min-width: 250px;\n        width: 50%;\n        line-height: 40px;\n        margin: 5px 0;\n        background: ${\n            ({correct, userClicked}) => \n                correct ?\n                '#44BBA4'\n                : \n                !correct && userClicked ?\n                    '#C76B84'\n                    :\n                    'white'\n        };\n        border: none;\n        border-radius: 8px;\n    }\n`","import { shuffleArray } from './utils';\n\nexport type Question = {\n    category: string;\n    difficulty: string;\n    correct_answer: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport type QuestionState = Question & { answers: string[] }\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\",\n}\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    return (\n        data.results.map((question: Question) => {\n            return (\n                { ...question, \n                    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n                }\n            )\n        })\n    )\n}","import React from 'react';\nimport { AnswerState } from './App'\nimport { Wrapper, ButtonWrapper } from './Question.styles';\n\ntype Props = {\n    question: string;\n    answers : string[];\n    handleClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerState | undefined;\n    questionNumber: number;\n    totalQuestions: number;\n}\n\nconst Question: React.FC<Props> = ({ \n    question, \n    answers , \n    handleClick, \n    userAnswer, \n    questionNumber, \n    totalQuestions \n}) => {\n    let answersJSX = answers.map((answer, index) => {\n        return (\n            <ButtonWrapper \n                className=\"button-wrapper\"\n                key={index}\n                correct={userAnswer?.correct_answer === answer}\n                userClicked={userAnswer?.answer === answer}\n            >\n                <button onClick={handleClick} disabled={userAnswer ? true : false} value ={answer}>\n                    <span dangerouslySetInnerHTML={{ __html: answer }}/>\n                </button>\n            </ButtonWrapper>\n        )\n    })\n    return (\n        <Wrapper>\n            <p className=\"number\">\n                Question: {questionNumber}/{totalQuestions}\n            </p>\n            <p className=\"question\" dangerouslySetInnerHTML={{ __html: question }}/>\n            <div className=\"answer\">{answersJSX}</div>\n        </Wrapper>\n    )                                                                                                                                                                                                                                                                                                                                                           \n}\n\nexport default Question;","export const shuffleArray = (array: any[]) => {\n    for (let i = array.length -1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp\n    }\n    return array\n} ","import styled, { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n    }\n\n    body {\n        --stripe: #FFF7EB;\n        --bg: #DEE1E3;\n        background: linear-gradient(135deg, var(--bg) 25%, transparent 25%) -50px 0,\n          linear-gradient(225deg, var(--bg) 25%, transparent 25%) -50px 0,\n          linear-gradient(315deg, var(--bg) 25%, transparent 25%),\n          linear-gradient(45deg, var(--bg) 25%, transparent 25%);\n        background-size: 100px 100px;\n        background-color: var(--stripe);\n        height: 100vh;\n        display: flex;\n        justify-content: center;\n    }\n\n    * {\n        box-sizing: border-box;\n        margin: 0;\n        font-family: 'Roboto', sans-serif;\n        color: #565F76;\n    }\n      \n`\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-top: 40px;\n\n    .title {\n        height: 10vh; \n        min-height: 30px;   \n    }\n\n    .score {\n        min-height: 30px;   \n    }\n\n    .next-wrapper {\n        height: 10vh;  \n        min-height: 120px;  \n    }\n\n    .start, .next {\n        cursor: pointer;\n        border: none;\n        border-radius: 8px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n        color: white;\n        background-color: #565F76;\n    }\n`","import React, {useState} from 'react';\nimport Question from './Question'\nimport {Difficulty, QuestionState, fetchQuizQuestions}Â from '../services/api'\n// import '../stylesheets/App.css';\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerState = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correct_answer: string;\n}\n\nconst totalQuestions= 10;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [userAnswer, setUserAnswer] = useState<AnswerState[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true); \n\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(totalQuestions, Difficulty.EASY);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswer([]);\n    setQuestionNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      let selectedAnswer = e.currentTarget.value\n      let correct = questions[questionNumber].correct_answer === selectedAnswer;\n      \n      if (correct) {\n        setScore(prev => prev +1);\n      }\n\n      let answerState = {\n        question: questions[questionNumber].question,\n        answer: selectedAnswer,\n        correct,\n        correct_answer: questions[questionNumber].correct_answer,\n      };\n\n      setUserAnswer((prev) => [...prev, answerState])\n    }\n  }\n\n  const nextQuestion = () => {\n    const nextQuestion = questionNumber + 1;\n\n    if (nextQuestion === totalQuestions) {\n      setGameOver(true);\n    } else {\n      setQuestionNumber(nextQuestion);\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1 className=\"title\">Quiz</h1>\n        {/* Start button */}\n        {\n          gameOver || userAnswer.length === totalQuestions ? \n          (<button className=\"start\" onClick={startQuiz}>Start</button>)\n          :\n          null\n        }\n\n        {/* Score */}\n        { !gameOver && !loading && <p className=\"score\">Score: {score}</p> }\n\n        {/* Loading */}\n        { loading && (\n          <p>  \n            <i className=\"fas fa-spinner fa-pulse\"></i>\n          </p>)\n        }\n\n        {/* Question and answers */}\n        { !loading && !gameOver && (\n          <Question \n            questionNumber={questionNumber + 1} \n            totalQuestions={totalQuestions} \n            question={questions[questionNumber].question}Â \n            answers={questions[questionNumber].answers} \n            userAnswer={userAnswer ? userAnswer[questionNumber] : undefined} \n            handleClick={checkAnswer} \n          />)\n        }\n\n        {/* Next-question button */}\n        {\n          !gameOver&& !loading && userAnswer.length === questionNumber + 1 && questionNumber !== totalQuestions -1 ?\n          <div className=\"next-wrapper\">\n            <button className=\"next\" onClick={nextQuestion}>Next question</button>\n          </div>\n          :\n          null\n        }\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}